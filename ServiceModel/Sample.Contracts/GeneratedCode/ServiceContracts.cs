///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     (c) Ziv Systems 2015
//
//      !!!   DO NOT CHANGE - This code was generated by a tool. Changes would be reverted by regeneration   
//
//      This code contains service classes for Operations implementing IOperation<T>.
//      Operations calsses must have a single constructor. All constructor parameters before IOperationsManager
//      are considered parameters of the operation to be provided upon call. All parmeters after are
//      considerd services to be injected to service class.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Sample.Operations 
{
    using Sample.DTO;
    using System;
    using System.ServiceModel;
    using Ziv.ServiceModel.Operations;

    [ServiceContract(Namespace="http://sample.com")]
    public interface ITrialsService
    {

        #region Operation DoSomething

        [OperationContract]
		SomeResult DoSomething(SomeParameters parameters);

        #endregion


        #region Operation DoSomethingLoggedInRequired

        [OperationContract]
		SomeResult DoSomethingLoggedInRequired(SomeParameters parameters);

        #endregion

    }
}


namespace Sample.Operations 
{
    using Sample.DTO;
    using System;
    using System.ServiceModel;
    using Ziv.ServiceModel.Operations;

    [ServiceContract(Namespace="http://sample.com")]
    public interface IAnotherTrialService
    {

        #region Operation DoOtherStuff

        [OperationContract]
		SomeResult DoOtherStuff();

        [OperationContract]
        OperationStartInformation DoOtherStuffAsync();

        [OperationContract]
        OperationStatus<SomeResult> DoOtherStuffGetStatus(Guid operationId);

        [OperationContract]
        void DoOtherStuffCancel(Guid operationId);

        #endregion

    }
}



