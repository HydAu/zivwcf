<# 
	// This  template is used to generate srvice contracts from operation classes (implementing Ziv.ServiceModel.IOperation)
	// To use, add an @assembly reference to the file containing your operation calsses and includ this as a @include in a tt file in your project
#>
<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetDir)Ziv.ServiceModel.CodeGeneration.dll" #>
<#@ import namespace="Ziv.ServiceModel.CodeGeneration" #>
<#@ output extension=".cs" #>
<# //System.Diagnostics.Debugger.Launch(); #>
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     (c) Ziv Systems 2015
//
//      !!!   DO NOT CHANGE - This code was generated by a tool. Changes would be reverted by regeneration   
//
//      This code contains service classes for Operations implementing IOperation<T>.
//      Operations calsses must have a single constructor. All constructor parameters before IOperationsManager
//      are considered parameters of the operation to be provided upon call. All parmeters after are
//      considerd services to be injected to service class.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////
<# 
    var contractInterfaces=OperationsCodeGenerationUtils.GetOperationContactInterfaces();
    foreach (var contractInterface in contractInterfaces)
    {
#>

namespace <#=contractInterface.InterfaceNamespace #> 
{
<#
        var requiredNamespaces = new List<string>(contractInterface.RequiredNamespaces);
        requiredNamespaces.Add("System.ServiceModel");
        foreach (var ns in requiredNamespaces.OrderBy(ns=>ns))       
        {
#>
    using <#=ns.ToString()#>;
<#
        }
#>

    <#=OperationsCodeGenerationUtils.GetServiceContractDecoration()#>
    public interface <#=contractInterface.InterfaceName#>
    {
<#
        foreach (Type operationType in contractInterface.OperationsTypes)
        {
            string shortName = operationType.OperationShortName();
            string resultTypeName = operationType.OperationResultType().Name;
            string parametersDecleration = operationType.OperationParameters().ToDecleration();
            string parametersInvocation = operationType.OperationParameters().ToInvocation();
            string servicesDecleration = operationType.OperationServices().ToDecleration();
#>

        #region Operation <#=shortName #>

<# 
            if (operationType.OperationIsGeneratingSyncMethod())
            {
                string syncOperationReturnType = operationType.OperationIsReturningVoid() ? "void" : resultTypeName;
#>
        [OperationContract]
<#
		        foreach (Type faultDetailType in operationType.OperationFaultContracts())
                {
#>
		[FaultContract(typeof(<#=faultDetailType.Name#>))]
<#
		        }
#>
		<#=syncOperationReturnType#> <#=shortName #>(<#=parametersDecleration#>);
<#
            }
#>
<# 
            if (operationType.OperationIsGeneratingAsyncMethods())
            { 
#>

        [OperationContract]
        OperationStartInformation <#=shortName#>Async(<#=parametersDecleration#>);

        [OperationContract]
<#
		        foreach (Type faultDetailType in operationType.OperationFaultContracts())
                {
#>
		[FaultContract(typeof(<#=faultDetailType.Name#>))]
<#
		        }
#>
        OperationStatus<<#=resultTypeName#>> <#=shortName#>GetStatus(Guid operationId);

        [OperationContract]
        void <#=shortName#>Cancel(Guid operationId);
<#
            }
#>

        #endregion

<#
        }
#>
    }
}

<#
    }
#>

