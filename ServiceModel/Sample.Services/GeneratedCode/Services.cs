///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//     (c) Ziv Systems 2015
//
//      !!!   DO NOT CHANGE - This code was generated by a tool. Changes would be reverted by regeneration   
//
//      This code contains service classes for Operations implementing IOperation<T>.
//      Operations calsses must have a single constructor. All constructor parameters before IOperationsManager
//      are considered parameters of the operation to be provided upon call. All parmeters after are
//      considerd services to be injected to service class.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Sample.Operations 
{
    using Sample.DTO;
    using System;
    using Ziv.ServiceModel;
    using Ziv.ServiceModel.Operations;
    using Ziv.ServiceModel.Operations.OperationsManager;

    public sealed class TrialsService : ServiceBase, ITrialsService
    {
        private readonly IOperationsManager _operationsManager;
        private readonly ISomeRequiredService _someRequiredService;
        private readonly ISomeRequiredService _requiredService;

        public TrialsService(IOperationsManager operationsManager, ISomeRequiredService someRequiredService, ISomeRequiredService requiredService)
            : base(operationsManager)
        {
            _operationsManager = operationsManager;
            _someRequiredService = someRequiredService;
            _requiredService = requiredService;
        }
   
        #region Operation DoSomething

        public SomeResult DoSomething(SomeParameters parameters)
        {
            return (SomeResult)DoOperation(GetOperationDoSomething(parameters)).Result;
        }

        private DoSomethingOperation GetOperationDoSomething(SomeParameters parameters)
        {
            return new DoSomethingOperation(parameters, _operationsManager, _someRequiredService);
        }

        #endregion

   
        #region Operation DoSomethingLoggedInRequired

        public SomeResult DoSomethingLoggedInRequired(SomeParameters parameters)
        {
            return (SomeResult)DoOperation(GetOperationDoSomethingLoggedInRequired(parameters)).Result;
        }

        private DoSomethingLoggedInRequiredOperation GetOperationDoSomethingLoggedInRequired(SomeParameters parameters)
        {
            return new DoSomethingLoggedInRequiredOperation(parameters, _operationsManager, _requiredService);
        }

        #endregion

    }
}


namespace Sample.Operations 
{
    using Sample.DTO;
    using System;
    using Ziv.ServiceModel;
    using Ziv.ServiceModel.Operations;
    using Ziv.ServiceModel.Operations.OperationsManager;

    public sealed class AnotherTrialService : ServiceBase, IAnotherTrialService
    {
        private readonly IOperationsManager _operationsManager;

        public AnotherTrialService(IOperationsManager operationsManager)
            : base(operationsManager)
        {
            _operationsManager = operationsManager;
        }
   
        #region Operation DoOtherStuff

        public SomeResult DoOtherStuff()
        {
            return (SomeResult)DoOperation(GetOperationDoOtherStuff()).Result;
        }

		public OperationStartInformation DoOtherStuffAsync()
        {
            return DoOperationAsync(GetOperationDoOtherStuff());
        }

        public OperationStatus<SomeResult> DoOtherStuffGetStatus(Guid operationId)
        {
            return GetOperationStatus(operationId).ToTypedStatus<SomeResult>();
        }

        public void DoOtherStuffCancel(Guid operationId)
        {
            CancelOperation(operationId);
        }

        private DoOtherStuff GetOperationDoOtherStuff()
        {
            return new DoOtherStuff(_operationsManager);
        }

        #endregion

    }
}

